#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // Set your project Prefix using your GUID
      def prefix        = "b6a7"

      // Routes
      def clusterDomain      = "apps.na311.openshift.opentlc.com"
      def tasksDevRoute      = "tasks-${prefix}-tasks-dev.${clusterDomain}"
      def ocpRegistryRoute   = "default-route-openshift-image-registry.${clusterDomain}"
      def nexusRegistryRoute = "nexus-registry-${prefix}-cicd.${clusterDomain}"
      def devProject  = "${prefix}-tasks-dev"
      def prodProject = "${prefix}-tasks-prod"
      // Set the tag for the development image: version + build number
      def devTag  = "0.0-0"
      // Set the tag for the production image: version
      def prodTag = "0.0"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        sh "${mvnCmd} clean package -DskipTests"
      }

      // The next two stages should run in parallel

      // Using Maven run the unit tests
      stage('Unit Tests') {
        steps {
                echo "Running Unit Tests"

                sh "${mvnCmd} test"

                //displays the results of tests in the Jenkins Task Overview
                step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
              }
      }

      // Using Maven to call SonarQube for Code Analysis
      stage('Code Analysis') {
        steps {
        echo "Running Code Analysis"

        sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube-gpte-hw-cicd.apps.na311.openshift.opentlc.com/ -Dsonar.projectName=${JOB_BASE_NAME} -Dsonar.projectVersion=${devTag}"
 
      }
      }

      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        steps {
        echo "Publish to Nexus"

        sh "${mvnCmd} deploy -DskipTests -DaltDeploymentRepository=nexus::default::http://nexus3-gpte-hw-cicd.apps.na311.openshift.opentlc.com/repository/releases"

       }
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"
        steps {
        echo "Building OpenShift container image tasks:${devTag}"
        script {
        openshift.withCluster() {
            openshift.withProject("${devProject}") {
            openshift.selector("bc", "tasks").startBuild("--from-file=./target/openshift-tasks.war", "--wait=true")
            openshift.tag("tasks:latest", "tasks:${devTag}")
            }
          }
        }
      }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        steps {
        echo "Deploy container image to Development Project"

        script {
        openshift.withCluster() {
            openshift.withProject("${devProject}") {
                openshift.set(
                    "image", 
                    "dc/tasks", 
                    "tasks=image-registry.openshift-image-registry.svc:5000/${devProject}/tasks:${devTag}"
                )
                // Update the Config Map which contains the users for the Tasks application
                // (just in case the properties files changed in the latest commit)
                openshift.selector('configmap', 'tasks-config').delete()
                def configmap = openshift.create(
                    'configmap', 
                    'tasks-config', 
                    '--from-file=./configuration/application-users.properties', 
                    '--from-file=./configuration/application-roles.properties'
                )
                 // Deploy the development application.
                openshift.selector("dc", "tasks").rollout().latest();    

                def dc = openshift.selector("dc", "tasks").object()
                def dc_version = dc.status.latestVersion
                def rc = openshift.selector("rc", "tasks-${dc_version}").object()

                echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
                while (rc.spec.replicas != rc.status.readyReplicas) {
                sleep 5
                rc = openshift.selector("rc", "tasks-${dc_version}").object()
                }
            }
          }
        }
      }
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {
        steps {
        script{
            echo "Copy image to Nexus Docker Registry"
            //Use skopeo to copy
            sh "skopeo --version"
            sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds=openshift:\$(oc whoami -t) --dest-creds=admin:admin123 docker://${ocpRegistryRoute}/${devProject}/tasks:${devTag} docker://${nexusRegistryRoute}/tasks:${prodTag}"

            // Tag the built image with the production tag.
            openshift.withCluster() {
                openshift.withProject("${prodProject}") {
                    openshift.tag("${devProject}/tasks:${devTag}", "${devProject}/tasks:${prodTag}")
                }
            }            
        }
      }
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""
      def otherDeploymentName     = "tasks-green"
      def activeServiceName       = ""
      stage('Blue/Green Production Deployment') {
        //  Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
        steps {
        echo "Blue/Green Deployment"

        // 1. Determine which application is active
        //      2. Update the image for the other application
        //      3. Deploy into the other application
        //      4. Update Config maps for other application
        //      5. Wait until application is running
        //         See above for example code
        script {
        openshift.withCluster() {
            openshift.withProject("${prodProject}") {
                //determine which service is active
                def tasksRoute = openshift.selector('route', 'tasks').object();
                activeServiceName = tasksRoute.spec.to.name;
                echo ">>> tasks route is pointing to ${activeServiceName} service <<<"

                otherDeploymentName = activeServiceName.contains('blue') ? 'tasks-green' : 'tasks-blue';
                echo "\n\t the other deployment is ${otherDeploymentName} !!!\n"

                openshift.set(
                    "image", 
                    "dc/${otherDeploymentName}", 
                    "${otherDeploymentName}=${nexusRegistryRoute}/tasks:${prodTag}"
                )
                // Update the Config Map which contains the users for the Tasks application
                // (just in case the properties files changed in the latest commit)
                openshift.selector("configmap", "${otherDeploymentName}-config").delete()
                def configmap = openshift.create(
                    "configmap", 
                    "${otherDeploymentName}-config", 
                    "--from-file=./configuration/application-users.properties", 
                    "--from-file=./configuration/application-roles.properties"
                )
                
                // Deploy the other application.
                openshift.selector("dc", "${otherDeploymentName}").rollout().latest();    

                def dc = openshift.selector("dc", "${otherDeploymentName}").object()
                def dc_version = dc.status.latestVersion
                def rc = openshift.selector("rc", "${otherDeploymentName}-${dc_version}").object()

                echo "Waiting for ReplicationController ${otherDeploymentName}-${dc_version} to be ready"
                while (rc.spec.replicas != rc.status.readyReplicas) {
                  sleep 5
                  rc = openshift.selector("rc", "${otherDeploymentName}-${dc_version}").object()
                }
            }
          }
        }
      }
      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        steps {
        input "Switch Production?"

        echo "Switching Production application to ${otherDeploymentName}."
        script {
            openshift.withCluster() {
                openshift.withProject("${prodProject}") {
                def route = openshift.selector("route/tasks").object()
                route.spec.to.name="${otherDeploymentName}"
                openshift.apply(route)
                }
            }
        }
      }
    }
    }
  }


}
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
